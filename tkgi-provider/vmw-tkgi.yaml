## Overriding values for Chart's values.yaml
## Example values to run Confluent Operator in Private Cloud
global:
  provider:
    name: private
    ## if any name which indicates regions
    ##
    region: ((REMOVED-REGION)) ##[//]:v1 - Updated to match host region
    kubernetes:
       deployment:
         ## If kubernetes is deployed in multi zone mode then specify availability-zones as appropriate
         ## If kubernetes is deployed in single availability zone then specify appropriate values
         ## For the private cloud, use kubernetes node labels as appropriate
         zones: ##[//]:v1 - Updated to match the TKGI AZs that are available
          - pks-az1
          - pks-az2
          - pks-az3
    ##
    ## Docker registry endpoint where Confluent Images are available.
    ##
    registry:
      fqdn: docker.io
      credential:
        required: false
  sasl:
    plain:
      username: cotkgi
      password: cotkgi-operator-example
  authorization:
    rbac:
      enabled: false
    simple:
      enabled: false
    superUsers: []
  dependencies:
    mds:
      endpoint: ""
      publicKey: ""

## Confluent Operator
##[//]:v1 - This entire section was added to create nodeAffinity to nodes labeled 'services'
operator:
  name: cc-operator
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: components
              operator: In
              values:
              - ops-services

## Zookeeper cluster
##
zookeeper:
  name: zookeeper
  replicas: 3
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
##[//]:v1 - Added to increase zookeeper resources (Use 1 CPU and 6GB of RAM)
  resources:
    requests:
      cpu: "1"
      memory: 6Gi
  jvmConfig:
    heapSize: 6G
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'zookeeper'
  nodeAffinity:
    key: components
    values:
    - zookeeper
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone

## Kafka Cluster
##
kafka:
  name: kafka
  replicas: 3
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
##[//]:v1 - Added to increase zookeeper resources (Use 1 CPU and 6GB of RAM)
  resources:
    requests:
      cpu: "1"
      memory: 6Gi
  jvmConfig:
    heapSize: 6G
  loadBalancer:
    enabled: enabled ##[//]:v1 - Enabled loadBalancer
    domain: "cotkgi.((REMOVED-REGION))" ##[//]:v1 - Added domain info
  tls:
    enabled: false
    fullchain: |-
    privkey: |-
    cacerts: |-
  metricReporter:
    enabled: true ##[//]:v1 - Enabled metricReporter
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'kafka'
  nodeAffinity:
    key: components
    values:
    - kafka
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone

## Schema Registry
##
schemaregistry:
  name: schemaregistry
  replicas: 3 ##[//]:v1 - Default is 2 instances, increased this to three so map across availability zones.
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
##[//]:v1 - Added resource requests tuned down from default of the chart.
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits: {}
##[//]:v1 - Tuned down JVM heap from default of the chart.
  jvmConfig:
    heapSize: 2G  
  tls:
    enabled: false
    authentication:
      type: ""
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'services' 
  nodeAffinity:
    key: components
    values:
    - core-services
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone

## Connect Cluster
##
connect:
  name: connectors
  replicas: 3 ##[//]:v1 - Default is 2 instances, increased this to three so map across availability zones.
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
##[//]:v1 - Added resource requests tuned down from default of the chart.
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits: {}
##[//]:v1 - Tuned down JVM heap from default of the chart.
  jvmConfig:
    heapSize: 2G
  tls:
    enabled: false
    ## "" for none, "tls" for mutual auth
    authentication:
      type: ""
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      bootstrapEndpoint: kafka:9071
      brokerCount: 3
    schemaRegistry:
      enabled: true
      url: http://schemaregistry:8081
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'services' 
  nodeAffinity:
    key: components
    values:
    - ops-services
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone

## Replicator Connect Cluster
##
replicator:
  name: replicator
  replicas: 3 ##[//]:v1 - Default is 2 instances, increased this to three so map across availability zones.
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
##[//]:v1 - Added resource requests tuned down from default of the chart.
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits: {}
##[//]:v1 - Tuned down JVM heap from default of the chart.
  jvmConfig:
    heapSize: 2G
  tls:
    enabled: false
    authentication:
      type: ""
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'services' 
  nodeAffinity:
    key: components
    values:
    - core-services
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone

## KSQL
##
ksql:
  name: ksql
  replicas: 3 ##[//]:v1 - Default is 2 instances, increased this to three so map across availability zones.
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
##[//]:v1 - Added resource requests tuned down from default of the chart.
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits: {}
##[//]:v1 - Tuned down JVM heap from default of the chart.
  jvmConfig:
    heapSize: 2G
  tls:
    enabled: false
    authentication:
      type: ""
    fullchain: |-
    privkey: |-
    cacerts: |-
  loadBalancer:
    enabled: false
    domain: ""
  dependencies:
    kafka:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
      brokerEndpoints: kafka-0.kafka:9071,kafka-1.kafka:9071,kafka-2.kafka:9071
    schemaRegistry:
      enabled: false
      tls:
        enabled: false
        authentication:
          type: ""
      url: http://schemaregistry:8081
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'services' 
  nodeAffinity:
    key: components
    values:
    - core-services
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone

## Control Center (C3) Resource configuration
##
controlcenter:
  name: controlcenter
  disableHostPort: true ##[//]:v1 - Need to set this to `true` to honor rack:topology mapping below
  license: ""
  ##
  ## C3 dependencies
  ##
  dependencies:
    c3KafkaCluster:
      brokerCount: 3
      bootstrapEndpoint: kafka:9071
      zookeeper:
        endpoint: zookeeper:2181
    connectCluster:
      enabled: true
      url: http://connectors:8083
    ksql:
      enabled: true
      url: http://ksql:9088
    schemaRegistry:
      enabled: true
      url: http://schemaregistry:8081
  ##
  ## C3 External Access
  ##
  loadBalancer:
    enabled: true
    domain: "cotkgi.((REMOVED-REGION))" ##[//]:v1 - Added domain info
  ##
  ## TLS configuration
  ##
  tls:
    enabled: false
    authentication:
      type: ""
    fullchain: |-
    privkey: |-
    cacerts: |-
  ##
  ## C3 authentication
  ##
  auth:
    basic:
      enabled: true
      ##
      ## map with key as user and value as password and role
      property:
        ((REMOVED-USERNAME)): ((REMOVED-PASSWORD)),Administrators
        disallowed: no_access
##[//]:v1 - Added to create nodeAffinity to nodes labeled 'services' 
  nodeAffinity:
    key: components
    values:
    - ops-services
##[//]:v1 - Added rack:topology mapping to assign one pod per AZ in TKGI  
  rack:
    topology: bosh.zone
